// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mvc_fakestore.Database;

#nullable disable

namespace mvc_fakestore.Migrations
{
    [DbContext(typeof(AplicacionDbContext))]
    [Migration("20240618151949_Migracion_01")]
    partial class Migracion_01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("mvc_fakestore.Models.Categorias", b =>
                {
                    b.Property<int>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategoria"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdCategoria");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("mvc_fakestore.Models.Productos", b =>
                {
                    b.Property<Guid>("IdProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Actualizado")
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("Cantidad")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("Creado")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FkCategoria")
                        .HasColumnType("int");

                    b.Property<int>("FkProveedor")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Precio")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("IdProducto");

                    b.HasIndex("FkCategoria");

                    b.HasIndex("FkProveedor");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("mvc_fakestore.Models.Proveedores", b =>
                {
                    b.Property<int>("IdProveedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProveedor"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdProveedor");

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("mvc_fakestore.Models.Usuarios", b =>
                {
                    b.Property<Guid>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime?>("Actualizado")
                        .HasMaxLength(30)
                        .HasColumnType("datetime2");

                    b.Property<string>("Apellido")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("Creado")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdUsuario");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("mvc_fakestore.Models.Ventas", b =>
                {
                    b.Property<Guid>("IdVenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Actualizado")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cantidad")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("Creado")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FkProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FkUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Total")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdVenta");

                    b.HasIndex("FkProducto");

                    b.HasIndex("FkUsuario");

                    b.ToTable("Ventas");
                });

            modelBuilder.Entity("mvc_fakestore.Models.Productos", b =>
                {
                    b.HasOne("mvc_fakestore.Models.Categorias", "Categorias")
                        .WithMany("Productos")
                        .HasForeignKey("FkCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mvc_fakestore.Models.Proveedores", "Proveedores")
                        .WithMany("Productos")
                        .HasForeignKey("FkProveedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categorias");

                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("mvc_fakestore.Models.Ventas", b =>
                {
                    b.HasOne("mvc_fakestore.Models.Productos", "Productos")
                        .WithMany("Ventas")
                        .HasForeignKey("FkProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mvc_fakestore.Models.Usuarios", "Usuarios")
                        .WithMany("Ventas")
                        .HasForeignKey("FkUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Productos");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("mvc_fakestore.Models.Categorias", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("mvc_fakestore.Models.Productos", b =>
                {
                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("mvc_fakestore.Models.Proveedores", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("mvc_fakestore.Models.Usuarios", b =>
                {
                    b.Navigation("Ventas");
                });
#pragma warning restore 612, 618
        }
    }
}
